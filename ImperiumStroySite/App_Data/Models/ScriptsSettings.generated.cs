//------------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//
//    Umbraco.ModelsBuilder v3.0.10.102
//
//   Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Web;
using Umbraco.Core.Models;
using Umbraco.Core.Models.PublishedContent;
using Umbraco.Web;
using Umbraco.ModelsBuilder;
using Umbraco.ModelsBuilder.Umbraco;

namespace Umbraco.Web.PublishedContentModels
{
	// Mixin content Type 1089 with alias "scriptsSettings"
	/// <summary>Scripts Settings</summary>
	public partial interface IScriptsSettings : IPublishedContent
	{
		/// <summary>Body - после открытия</summary>
		string BodyAfterOpening { get; }

		/// <summary>Body - перед закрытием</summary>
		string BodyBeforeClosing { get; }

		/// <summary>Head - после открытия</summary>
		string HeadAfterOpening { get; }

		/// <summary>Head - перед закрытием</summary>
		string HeadBeforeClosing { get; }
	}

	/// <summary>Scripts Settings</summary>
	[PublishedContentModel("scriptsSettings")]
	public partial class ScriptsSettings : PublishedContentModel, IScriptsSettings
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "scriptsSettings";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public ScriptsSettings(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<ScriptsSettings, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Body - после открытия: После открывающего тега body
		///</summary>
		[ImplementPropertyType("bodyAfterOpening")]
		public string BodyAfterOpening
		{
			get { return GetBodyAfterOpening(this); }
		}

		/// <summary>Static getter for Body - после открытия</summary>
		public static string GetBodyAfterOpening(IScriptsSettings that) { return that.GetPropertyValue<string>("bodyAfterOpening"); }

		///<summary>
		/// Body - перед закрытием: Перед закрывающим тегом body
		///</summary>
		[ImplementPropertyType("bodyBeforeClosing")]
		public string BodyBeforeClosing
		{
			get { return GetBodyBeforeClosing(this); }
		}

		/// <summary>Static getter for Body - перед закрытием</summary>
		public static string GetBodyBeforeClosing(IScriptsSettings that) { return that.GetPropertyValue<string>("bodyBeforeClosing"); }

		///<summary>
		/// Head - после открытия: После открывающего тега head
		///</summary>
		[ImplementPropertyType("headAfterOpening")]
		public string HeadAfterOpening
		{
			get { return GetHeadAfterOpening(this); }
		}

		/// <summary>Static getter for Head - после открытия</summary>
		public static string GetHeadAfterOpening(IScriptsSettings that) { return that.GetPropertyValue<string>("headAfterOpening"); }

		///<summary>
		/// Head - перед закрытием: Перед закрывающим тегом head
		///</summary>
		[ImplementPropertyType("headBeforeClosing")]
		public string HeadBeforeClosing
		{
			get { return GetHeadBeforeClosing(this); }
		}

		/// <summary>Static getter for Head - перед закрытием</summary>
		public static string GetHeadBeforeClosing(IScriptsSettings that) { return that.GetPropertyValue<string>("headBeforeClosing"); }
	}
}
