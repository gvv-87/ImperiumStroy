//------------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//
//    Umbraco.ModelsBuilder v3.0.10.102
//
//   Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Web;
using Umbraco.Core.Models;
using Umbraco.Core.Models.PublishedContent;
using Umbraco.Web;
using Umbraco.ModelsBuilder;
using Umbraco.ModelsBuilder.Umbraco;

namespace Umbraco.Web.PublishedContentModels
{
	// Mixin content Type 1082 with alias "seoBase"
	/// <summary>SEO Base</summary>
	public partial interface ISeoBase : IPublishedContent
	{
		/// <summary>Meta Description</summary>
		string SeoMetaDescription { get; }

		/// <summary>No follow</summary>
		bool SeoNoFollow { get; }

		/// <summary>No index</summary>
		bool SeoNoIndex { get; }

		/// <summary>Title</summary>
		string SeoTitle { get; }
	}

	/// <summary>SEO Base</summary>
	[PublishedContentModel("seoBase")]
	public partial class SeoBase : PublishedContentModel, ISeoBase
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "seoBase";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public SeoBase(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SeoBase, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Meta Description: Описание для поисковиков.  До 155 символов желательно.
		///</summary>
		[ImplementPropertyType("seoMetaDescription")]
		public string SeoMetaDescription
		{
			get { return GetSeoMetaDescription(this); }
		}

		/// <summary>Static getter for Meta Description</summary>
		public static string GetSeoMetaDescription(ISeoBase that) { return that.GetPropertyValue<string>("seoMetaDescription"); }

		///<summary>
		/// No follow: Запретить поисковым роботам переходить по ссылкам на странице
		///</summary>
		[ImplementPropertyType("seoNoFollow")]
		public bool SeoNoFollow
		{
			get { return GetSeoNoFollow(this); }
		}

		/// <summary>Static getter for No follow</summary>
		public static bool GetSeoNoFollow(ISeoBase that) { return that.GetPropertyValue<bool>("seoNoFollow"); }

		///<summary>
		/// No index: Запретить индексацию страницы поисковым роботам
		///</summary>
		[ImplementPropertyType("seoNoIndex")]
		public bool SeoNoIndex
		{
			get { return GetSeoNoIndex(this); }
		}

		/// <summary>Static getter for No index</summary>
		public static bool GetSeoNoIndex(ISeoBase that) { return that.GetPropertyValue<bool>("seoNoIndex"); }

		///<summary>
		/// Title: Заголовок во вкладке браузера и сниппете поисковиков
		///</summary>
		[ImplementPropertyType("seoTitle")]
		public string SeoTitle
		{
			get { return GetSeoTitle(this); }
		}

		/// <summary>Static getter for Title</summary>
		public static string GetSeoTitle(ISeoBase that) { return that.GetPropertyValue<string>("seoTitle"); }
	}
}
